using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace TASK_123
{
    public class Program
    {
//        
    public static string GetCreditCardVendor(string card_number)
    {   
        int p, sum = 0;
        int vendor=0;
        string card_vendor="Unknown";
        int N = card_number.Length;
        for (int i = 1; i <= N ; i++)
            if (card_number[N-i]==' ')
                { card_number=card_number.Remove(N-i, 1);
                  N--;
                  i--;
                }
        for (int i = 0; i < N ; i++)
            { p = card_number[(N-1)-i] - '0';
              if (i % 2 == 1) 
                { p = 2*p;
                  if (p > 9) p = p - 9;
                }
              sum = sum + p;
            }
        sum = sum % 10;

        if (card_number[0]=='4'&&(N==13||N==16||N==19))
            vendor=4;
        else
            if (String.Compare(card_number.Substring(0,2),"50")==(1) && String.Compare(card_number.Substring(0,2),"56")==(-1) && N==16)
                vendor=3;
            else
                if ((String.Compare(card_number.Substring(0,2),"50")==(0) || String.Compare(card_number.Substring(0,2),"55")==(1)
                                                                          && String.Compare(card_number.Substring(0,2),"70")==(-1))
                                                                             && (N>=12 && N<=19))
                vendor=2;
        if (card_number[0]=='3')
            {
            if ((card_number[1]=='4'||card_number[1]=='7')&&(N==15))
                vendor=1;
            else
                if (String.Compare(card_number.Substring(1,3),"527")==(1) && String.Compare(card_number.Substring(1,3),"590")==(-1)
                                                                          && N==16)
                    vendor=5;
            }
        switch (vendor)
        {
            case 1:
                card_vendor="American Express";
                break;
            case 2:
                card_vendor="Maestro";
                break;
            case 3:
                card_vendor="MasterCard";
                break;
            case 4:
                card_vendor="VISA";
                break;
            case 5:
                card_vendor="JCB";
                break;
            default:
                break;
        }
    if (vendor!=0 && sum!=0) card_vendor="Invalid";        
    return card_vendor;
    }
//   
    public static bool IsCreditCardNumberValid(string valid_number)
    {
        int p;
        int sum = 0;
        int N = valid_number.Length;
        for (int i = 1; i <= N ; i++)
            if (valid_number[N-i]==' ')
                { valid_number=valid_number.Remove(N-i, 1);
                  N--;
                  i--;
                }
        //Console.WriteLine("N="+N);
        for (int i = 0; i < N ; i++)     
            { p = valid_number[(N-1)-i] - '0';
              if (i % 2 == 1) 
                { p = 2*p;
                  if (p > 9) p = p - 9;
                }
              sum = sum + p;
            }
        //Console.WriteLine(sum);
        sum = sum % 10;
        
        if (String.Compare(GetCreditCardVendor(valid_number),"Unknown")==0) return false;
        else if (sum == 0) return true;
             else return false;
        //if ((sum == 0) && (String.Compare(GetCreditCardVendor(valid_number),"Unknown")!=0)) return true;
        //else return false;  
    }
    
//
    public static string GenerateNextCreditCardNumber(string next_number)
    {    
        string check_vendor,next_vendor;
        int p, i;
        int N = next_number.Length;
        for (i = 1; i <= N ; i++)
            if (next_number[N-i]==' ')
                { next_number = next_number.Remove(N-i, 1);
                  N--;
                  i--;
                }
        check_vendor=GetCreditCardVendor(next_number);
        //Console.WriteLine(check_vendor);
        if (String.Compare(check_vendor,"Unknown")==0) return "Not_valid_card";
        do
        {   i = 0;
            do
            {   i++;
                p = next_number[N-i] - '0' + 1;
                p = p % 10;
                next_number=next_number.Remove(N-i,1);                   
                next_number=next_number.Insert(N-i,Convert.ToString(p));
            }
            while(p==0);
            if (i>=N) break;
        }
        while(IsCreditCardNumberValid(next_number)==false && String.Compare(GetCreditCardVendor(next_number),"Unknown")!=0);
        next_vendor=GetCreditCardVendor(next_number);
        Console.WriteLine(next_vendor);
        if ((String.Compare(check_vendor,next_vendor)==0 || String.Compare(check_vendor,"Invalid")==0)
            && String.Compare(next_vendor,"Unknown")!=0) return next_number;
        else return "No_more_card_number";
        
    }  
        
//        
        public static void Main(string[] args)
        {
            string card;
            
            // card = "3434 3434 3434 590";    // test for AmericanExpress card
            // card = "3499 9999 9999 991";    // test for last number
            // card = "50000000000006114";    // test for valid number
            // card = "4561 2612 1234 5459";    // test for next valid number
               card = "3530 1113 3330 00001";    // test for valid number but unknown vendor
            
            Console.WriteLine("Vendor of credit card '" + card + "' is:");
            Console.WriteLine(GetCreditCardVendor(card));
            
            Console.WriteLine("\nNumber of credit card '" + card + "' is:");
            Console.WriteLine(IsCreditCardNumberValid(card));
            
            Console.WriteLine("\nNext valid number after '" + card + "' is:");
            Console.WriteLine(GenerateNextCreditCardNumber(card));
            Console.WriteLine("....||||....||||....");            

        }
    }
}
